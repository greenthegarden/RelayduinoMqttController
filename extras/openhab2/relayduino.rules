import org.joda.time.DateTime

import java.util.LinkedHashMap
import java.util.Iterator
import java.util.Map.Entry
import java.util.Map

var LinkedHashMap<Integer, Integer> RelayRequests = new LinkedHashMap<Integer, Integer>()

val String relayduinosystemname = "Relayduino"

// define name for logging
val String relayduinologgingname = "relayduino"

// define address for notifications
val String notificationto = "greenthegarden@gmail.com"

// define email address to send messages
val String mailto = "cutlervufamily@gmail.com"

var int relayduinoUpdateAge = 5	// minutes

var Timer relayduinoUpdateTimer = null

var int lastRelayRunning = 0

val org.eclipse.xtext.xbase.lib.Functions$Function2 relayOnCommand = [
	Integer relayIdx,
	Integer duration |
		val cmdStr = relayIdx.toString + "," + duration.toString
		RelayduinoRelayControl.sendCommand(cmdStr)
		Thread::sleep(1000)
		if (RelayduinoUseMasterRelay.state == ON) {
			val cmdStr = RelayduinoMasterRelay.state.toString + "," + duration.toString
			RelayduinoRelayControl.sendCommand(cmdStr)
		}
]

val org.eclipse.xtext.xbase.lib.Functions$Function1 relayOffCommand = [
	Integer relayIdx |
		if (RelayduinoUseMasterRelay.state == ON) {
			val cmdStr2 = RelayduinoMasterRelay.state.toString + "," + "0"
			RelayduinoRelayControl.sendCommand(cmdStr2)
		}
		Thread::sleep(1000)
		val cmdStr = relayIdx.toString + "," + "0"
		RelayduinoRelayControl.sendCommand(cmdStr)
]

val org.eclipse.xtext.xbase.lib.Functions$Function1 removeRelayRequest = [
	Integer relayIdx |
		if (relayIdx == 1) {
			RelayduinoRelay1Request.sendCommand(OFF)
		} else if (relayIdx == 2) {
			RelayduinoRelay2Request.sendCommand(OFF)
		} else if (relayIdx == 3) {
			RelayduinoRelay3Request.sendCommand(OFF)
		} else if (relayIdx == 4) {
			RelayduinoRelay4Request.sendCommand(OFF)
		}
	]

rule "Relayduino defaults"
when
	System started
then
	RelayduinoState.sendCommand(ON)
	RelayduinoUseMasterRelay.sendCommand(ON)
	RelayduinoMasterRelay.postUpdate(8)
	RelayduinoRelayRunning.postUpdate(0)
	gRelayduinoRelaysState.members.forEach[i | i.sendCommand(OFF)]
	gRelayduinoRelaysManualDuration.members.forEach[i | i.postUpdate(0)]
	gRelayduinoRelaysMode.members.forEach[i | i.sendCommand(1)]
end

rule "Relayduino last connected timestamp"
when
	Item RelayduinoConnectedMessage received update
then
	postUpdate(RelayduinoLastConnected, new DateTimeType())
	postUpdate(RelayduinoLastStatusUpdate, new DateTimeType())
	RelayduinoState.sendCommand(ON)
end

rule "Relayduino update status interval"
when
	Item RelayduinoStatusInterval changed
then
	var Number newUpdateAge = RelayduinoStatusInterval.state as DecimalType
	relayduinoUpdateAge = (newUpdateAge / 60000).intValue	// convert to minutes and update
end

rule "Relayduino status update timestamp | timer"
when
	Item RelayduinoUptimeRaw received update
then
	postUpdate(RelayduinoLastStatusUpdate, new DateTimeType())
	if (relayduinoUpdateTimer == null || relayduinoUpdateTimer.hasTerminated) {
		relayduinoUpdateTimer = createTimer(now.plusMinutes(2*relayduinoUpdateAge), [|
			relayduinoState.sendCommand(OFF)
			relayduinoUpdateTimer = null
			])
	} else {
		relayduinoUpdateTimer.reschedule(now.plusMinutes(2*relayduinoUpdateAge)
	}
end

rule "Relayduino state change notification"
when
	Item RelayduinoState changed
then
	val String message = "relayduinosystemname + ":  + RelayduinoState.state.toString + " at " + new DateTime().toString
	logInfo(relayduinologgingname, message)
	sendNotification(notificationto, message)
end

rule "Relayduino remove requests"
when
	Item gRelayduinoRelaysState changed to OFF
then
	if (lastRelayRunning > 0) {
		removeRelayRequest.apply(lastRelayRunning)
	}
end

rule "Relayduino process requests"
when
	Item gRelayduinoRelaysState changed to OFF or
	Item RelayRequestsSize changed
then
	if (gRelayduinoRelaysState.state == OFF) {
		if (RelayRequests.size > 0) {
			val Iterator<Entry<Integer, Integer>> it = RelayRequests.entrySet().iterator();
			if (it.hasNext()) {
				val Map.Entry<Integer, Integer> entry = it.next();
				relayOnCommand.apply(entry.getKey(), entry.getValue())
				RelayRequests.remove(entry.getKey())
				RelayRequestsSize.postUpdate(RelayRequests.size())
				lastRelayRunning = entry.getKey()
			}
		}
	}
end

rule "Relayduino relay request"
when
	Item RelayduinoRelayRequest changed
then
	var String message = ""
	message = "RelayduinoRelayRequest state changed to " + RelayduinoRelayRequest.state.toString + " at " + new DateTime().toString
	logInfo(relayduinologgingname, message)

	val String[] messageParts = RelayduinoRelayRequest.state.toString.split(",");
	val Integer relay = Integer::parseInt(messageParts.get(0))
	val Integer duration = Integer::parseInt(messageParts.get(1))

	if (duration > 0) {		// relay request to turn on
		RelayRequests.put(relay, duration)
		message = "RelayRequests.put with relay " + relay + " and duration " + duration + " at " + new DateTime().toString
		logInfo(relayduinologgingname, message)
	} else {		// relay was turned on
		RelayRequests.remove(relay)
		message = "RelayRequests.remove with relay " + relay + " at " + new DateTime().toString
		logInfo(relayduinologgingname, message)
	}
	RelayRequestsSize.postUpdate(RelayRequests.size())
	message = "RelayRequests.size is " + RelayRequests.size()
	logInfo(relayduinologgingname, message)
end

rule "Relayduino Relay 1 Request"
when
	Item RelayduinoRelay1Request changed
then
	val Integer relay = 1
	var String message = ""
	if (RelayduinoRelay1Request.state == ON) {
		var Integer duration = (RelayduinoRelay2DefaultDuration.state as DecimalType).intValue
		if (RelayduinoRelay1Mode.state == 0) {
			// mode off
			return;
		}
		if (RelayduinoRelay1Mode.state == 2) {
			// manual mode
			if (RelayduinoRelay1ManualDuration != NULL) {
				duration = (RelayduinoRelay1ManualDuration.state as DecimalType).intValue
			}
		}
		if (duration > 0) {
			// relay request to turn on
			RelayRequests.put(relay, duration)
			message = "RelayRequests.put with relay " + relay + " and duration " + duration + " at " + new DateTime().toString
			logInfo(relayduinologgingname, message)
		}
	} else {
		// relay was turned on
		RelayRequests.remove(relay)
		message = "RelayRequests.remove with relay " + relay + " at " + new DateTime().toString
		logInfo(relayduinologgingname, message)
		if (lastRelayRunning == relay) {
			relayOffCommand.apply(relay)
		}
		if (RelayduinoRelay1Mode.state == 2) {
			// manual mode
			RelayduinoRelay1Mode.postUpdate(1)	// set to auto
		}
	}
	RelayRequestsSize.postUpdate(RelayRequests.size())
end

rule "Relayduino Relay 2 Request"
when
	Item RelayduinoRelay2Request changed
then
	val Integer relay = 2
	var String message = ""
	if (RelayduinoRelay2Request.state == ON) {
		var Integer duration = (RelayduinoRelay2DefaultDuration.state as DecimalType).intValue
		if (RelayduinoRelay2Mode.state == 0) {
			// mode off
			return;
		}
		if (RelayduinoRelay2Mode.state == 2) {
			// manual mode
			if (RelayduinoRelay2ManualDuration != NULL) {
				duration = (RelayduinoRelay2ManualDuration.state as DecimalType).intValue
			}
		}
		if (duration > 0) {
			// relay request to turn on
			RelayRequests.put(relay, duration)
			message = "RelayRequests.put with relay " + relay + " and duration " + duration + " at " + new DateTime().toString
			logInfo(relayduinologgingname, message)
		}
	} else {
		// relay was turned on
		RelayRequests.remove(relay)
		message = "RelayRequests.remove with relay " + relay + " at " + new DateTime().toString
		logInfo(relayduinologgingname, message)
		if (lastRelayRunning == relay) {
			relayOffCommand.apply(relay)
		}
		if (RelayduinoRelay2Mode.state == 2) {
			// manual mode
			RelayduinoRelay2Mode.postUpdate(1)	// set to auto
		}
	}
	RelayRequestsSize.postUpdate(RelayRequests.size())
end

rule "Relayduino Relay 3 Request"
when
	Item RelayduinoRelay3Request changed
then
	val Integer relay = 3
	var String message = ""
	if (RelayduinoRelay3Request.state == ON) {
		var Integer duration = (RelayduinoRelay3DefaultDuration.state as DecimalType).intValue
		if (RelayduinoRelay3Mode.state == 0) {
			// mode off
			return;
		}
		if (RelayduinoRelay3Mode.state == 2) {
			// manual mode
			if (RelayduinoRelay3ManualDuration != NULL) {
				duration = (RelayduinoRelay3ManualDuration.state as DecimalType).intValue
			}
		}
		if (duration > 0) {
			// relay request to turn on
			RelayRequests.put(relay, duration)
			message = "RelayRequests.put with relay " + relay + " and duration " + duration + " at " + new DateTime().toString
			logInfo(relayduinologgingname, message)
		}
	} else {
		// relay was turned on
		RelayRequests.remove(relay)
		message = "RelayRequests.remove with relay " + relay + " at " + new DateTime().toString
		logInfo(relayduinologgingname, message)
		if (lastRelayRunning == relay) {
			relayOffCommand.apply(relay)
		}
		if (RelayduinoRelay3Mode.state == 2) {
			// manual mode
			RelayduinoRelay3Mode.postUpdate(1)	// set to auto
		}
	}
	RelayRequestsSize.postUpdate(RelayRequests.size())
end

rule "Relayduino Relay 4 Request"
when
	Item RelayduinoRelay4Request changed
then
	val Integer relay = 4
	var String message = ""
	if (RelayduinoRelay4Request.state == ON) {
		var Integer duration = (RelayduinoRelay4DefaultDuration.state as DecimalType).intValue
		if (RelayduinoRelay4Mode.state == 0) {
			// mode off
			return;
		}
		if (RelayduinoRelay4Mode.state == 2) {
			// manual mode
			if (RelayduinoRelay4ManualDuration != NULL) {
				duration = (RelayduinoRelay4ManualDuration.state as DecimalType).intValue
			}
		}
		if (duration > 0) {
			// relay request to turn on
			RelayRequests.put(relay, duration)
			message = "RelayRequests.put with relay " + relay + " and duration " + duration + " at " + new DateTime().toString
			logInfo(relayduinologgingname, message)
		}
	} else {
		// relay was turned on
		RelayRequests.remove(relay)
		message = "RelayRequests.remove with relay " + relay + " at " + new DateTime().toString
		logInfo(relayduinologgingname, message)
		if (lastRelayRunning == relay) {
			relayOffCommand.apply(relay)
		}
		if (RelayduinoRelay4Mode.state == 2) {
			// manual mode
			RelayduinoRelay4Mode.postUpdate(1)	// set to auto
		}
	}
	RelayRequestsSize.postUpdate(RelayRequests.size())
end

rule "Relayduino relay state"
when
	Item RelayduinoRelayState changed
then
	var String message = ""
	message = "RelayduinoRelayState state changed to " + RelayduinoRelayState.state.toString + " at " + new DateTime().toString
	logInfo(relayduinologgingname, message)
	val String[] messageParts = RelayduinoRelayState.state.toString.split(",");
	val Integer relay = Integer::parseInt(messageParts.get(0))
	val Integer state = Integer::parseInt(messageParts.get(1))
	if (state == 1) {
		if (relay == 1) {
			RelayduinoRelay1State.sendCommand(ON)
		} else if (relay == 2) {
			RelayduinoRelay2State.sendCommand(ON)
		} else if (relay == 3) {
			RelayduinoRelay3State.sendCommand(ON)
		} else if (relay == 4) {
			RelayduinoRelay4State.sendCommand(ON)
		} else if (relay == 5) {
			RelayduinoRelay5State.sendCommand(ON)
		} else if (relay == 6) {
			RelayduinoRelay6State.sendCommand(ON)
		} else if (relay == 7) {
			RelayduinoRelay7State.sendCommand(ON)
		} else if (relay == 8) {
			RelayduinoRelay8State.sendCommand(ON)
		}
		RelayduinoRelayRunning.postUpdate(relay)
	} else if (state == 0) {
		if (relay == 1) {
			RelayduinoRelay1State.sendCommand(OFF)
		} else if (relay == 2) {
			RelayduinoRelay2State.sendCommand(OFF)
		} else if (relay == 3) {
			RelayduinoRelay3State.sendCommand(OFF)
		} else if (relay == 4) {
			RelayduinoRelay4State.sendCommand(OFF)
		} else if (relay == 5) {
			RelayduinoRelay5State.sendCommand(OFF)
		} else if (relay == 6) {
			RelayduinoRelay6State.sendCommand(OFF)
		} else if (relay == 7) {
			RelayduinoRelay7State.sendCommand(OFF)
		} else if (relay == 8) {
			RelayduinoRelay8State.sendCommand(OFF)
		}
		RelayduinoRelayRunning.postUpdate(0)
	}
end

rule "Relayduino Last relay 1 on and off times"
when
	Item RelayduinoRelay1State received command
then
	if (receivedCommand == ON) {
		postUpdate(RelayduinoRelay1LastOn, new DateTimeType())
	} else {
		postUpdate(RelayduinoRelay1LastOff, new DateTimeType())
	}
end

rule "Relayduino Last relay 2 on and off times"
when
	Item RelayduinoRelay2State received command
then
	if (receivedCommand == ON) {
		postUpdate(RelayduinoRelay2LastOn, new DateTimeType())
	} else {
		postUpdate(RelayduinoRelay2LastOff, new DateTimeType())
	}
end

rule "Relayduino Last relay 3 on and off times"
when
	Item RelayduinoRelay3State received command
then
	if (receivedCommand == ON) {
		postUpdate(RelayduinoRelay3LastOn, new DateTimeType())
	} else {
		postUpdate(RelayduinoRelay3LastOff, new DateTimeType())
	}
end

rule "Relayduino Last relay 4 on and off times"
when
	Item RelayduinoRelay4State received command
then
	if (receivedCommand == ON) {
		postUpdate(RelayduinoRelay4LastOn, new DateTimeType())
	} else {
		postUpdate(RelayduinoRelay4LastOff, new DateTimeType())
	}
end

rule "Relayduino Last relay 5 on and off times"
when
	Item RelayduinoRelay5State received command
then
	if (receivedCommand == ON) {
		postUpdate(RelayduinoRelay5LastOn, new DateTimeType())
	} else {
		postUpdate(RelayduinoRelay5LastOff, new DateTimeType())
	}
end

rule "Relayduino Last relay 6 on and off times"
when
	Item RelayduinoRelay6State received command
then
	if (receivedCommand == ON) {
		postUpdate(RelayduinoRelay6LastOn, new DateTimeType())
	} else {
		postUpdate(RelayduinoRelay6LastOff, new DateTimeType())
	}
end

rule "Relayduino Last relay 7 on and off times"
when
	Item RelayduinoRelay7State received command
then
	if (receivedCommand == ON) {
		postUpdate(RelayduinoRelay7LastOn, new DateTimeType())
	} else {
		postUpdate(RelayduinoRelay7LastOff, new DateTimeType())
	}
end

rule "Relayduino Last relay 8 on and off times"
when
	Item RelayduinoRelay8State received command
then
	if (receivedCommand == ON) {
		postUpdate(RelayduinoRelay8LastOn, new DateTimeType())
	} else {
		postUpdate(RelayduinoRelay8LastOff, new DateTimeType())
	}
end
