//import java.util.concurrent.locks.ReentrantLock
//import java.util.LinkedHashMap
import java.util.HashMap
import java.util.Iterator
import java.util.Map.Entry
import java.util.Map

import org.joda.time.DateTime

// define name for notifications
val String systemname = "Irrigation"

// define name for logging
val String loggingname = "irrigation"

// define address for notifications
val String notificationto = "greenthegarden@gmail.com"

// define email address to send messages
val String mailto = "cutlervufamily@gmail.com"

var Integer relayduinoUpdateAge = 5	// minutes

var Timer relayduinoUpdateTimer = null

//var LinkedHashMap<Integer, Integer> RelayRequests = new LinkedHashMap<Integer, Integer>()

var HashMap<Integer, Integer> RelayRequests = newHashMap()
	
var Integer lastRelayRunning = 0

//val ReentrantLock lock  = new ReentrantLock()

//val org.eclipse.xtext.xbase.lib.Functions$Function2 relayOnCommand = [
//	Integer relayIdx,
//	Integer duration |
//		var String cmdStr = ""
//		cmdStr = relayIdx.toString + "," + duration.toString
//		RelayduinoRelayControl.sendCommand(cmdStr)
//		Thread::sleep(1000)
//		if (RelayduinoUseMasterRelay.state == ON) {
//			cmdStr = RelayduinoMasterRelay.state.toString + "," + duration.toString
//			RelayduinoRelayControl.sendCommand(cmdStr)
//		}
//]

//val org.eclipse.xtext.xbase.lib.Functions$Function1 relayOffCommand = [
//	Integer relayIdx |
//		var String cmdStr = ""
//		if (RelayduinoUseMasterRelay.state == ON) {
//			cmdStr = RelayduinoMasterRelay.state.toString + "," + "0"
//			RelayduinoRelayControl.sendCommand(cmdStr)
//		}
//		Thread::sleep(1000)
//		cmdStr = relayIdx.toString + "," + "0"
//		RelayduinoRelayControl.sendCommand(cmdStr)
//]

//val org.eclipse.xtext.xbase.lib.Functions$Function1 removeRelayRequest = [
//	Integer relayIdx |
//		val String request = "RelayduinoRelay_" + relayIdx.toString + "_Request"
//		request.sendCommand("OFF")
//	]

rule "Relayduino defaults"
when
	System started
then
	RelayduinoState.sendCommand(ON)
	RelayduinoUseMasterRelay.sendCommand(ON)
	RelayduinoMasterRelay.postUpdate(8)
	RelayduinoRelayRunning.postUpdate(0)
//	gRelayduinoRelaysState.members.forEach[i | i.sendCommand(OFF)]
//	gRelayduinoRelaysMode.members.forEach[i | i.sendCommand(0)]
	if (RelayduinoRelay_1_DefaultDuration == null) {
		RelayduinoRelay_1_DefaultDuration.postUpdate(35)
	}
	if (RelayduinoRelay_2_DefaultDuration == null) {
		RelayduinoRelay_2_DefaultDuration.postUpdate(65)
	}
	if (RelayduinoRelay_3_DefaultDuration == null) {
		RelayduinoRelay_3_DefaultDuration.postUpdate(125)
	}
	if (RelayduinoRelay_4_DefaultDuration == null) {
		RelayduinoRelay_4_DefaultDuration.postUpdate(15)
	}
end

rule "Relayduino last connected timestamp"
when
	Item RelayduinoConnectedMessage received update
then
	postUpdate(RelayduinoLastConnected, new DateTimeType())
	postUpdate(RelayduinoLastStatusUpdate, new DateTimeType())
	RelayduinoState.sendCommand(ON)
end

rule "Relayduino update status interval"
when
	Item RelayduinoStatusInterval changed
then
	var Number newUpdateAge = RelayduinoStatusInterval.state as DecimalType
	relayduinoUpdateAge = (newUpdateAge / 60000).intValue	// convert to minutes and update
end

rule "Relayduino status update timestamp | timer"
when
	Item RelayduinoUptimeRaw received update
then
	postUpdate(RelayduinoLastStatusUpdate, new DateTimeType())
	if (relayduinoUpdateTimer == null || relayduinoUpdateTimer.hasTerminated) {
		relayduinoUpdateTimer = createTimer(now.plusMinutes(2*relayduinoUpdateAge), [|
			RelayduinoState.sendCommand(OnOffType::OFF)
			relayduinoUpdateTimer = null
			])
	} else {
		relayduinoUpdateTimer.reschedule(now.plusMinutes(2*relayduinoUpdateAge))
	}
end

rule "Relayduino state change notification"
when
	Item RelayduinoState changed
then
	val String message = systemname + ": "  + RelayduinoState.state.toString + " at " + new DateTime().toString
	logInfo(loggingname, message)
	sendNotification(notificationto, message)
end

rule "Relayduino remove requests"
when
	Item gRelayduinoRelaysState changed to OFF
then
	if (lastRelayRunning > 0) {
//		removeRelayRequest.apply(lastRelayRunning)
		val String itemstr = "RelayduinoRelay_" + lastRelayRunning.toString + "_Request"
		itemstr.sendCommand("OFF")
	}
end

rule "Relayduino process requests"
when
	Item gRelayduinoRelaysState changed to OFF or
	Item RelayRequestsSize changed
then
	if (gRelayduinoRelaysState.state == OnOffType::OFF) {
		if (RelayRequests.size > 0) {
			val Iterator<Entry<Integer, Integer>> it = RelayRequests.entrySet().iterator();
			if (it.hasNext()) {
				val Map.Entry<Integer, Integer> entry = it.next();
//				relayOnCommand.apply(entry.getKey(), entry.getValue())
				var String cmdStr = ""
				cmdStr = entry.getKey().toString + "," + entry.getValue().toString
				RelayduinoRelayControl.sendCommand(cmdStr)
				Thread::sleep(1000)
				if (RelayduinoUseMasterRelay.state == OnOffType::ON) {
					cmdStr = RelayduinoMasterRelay.state.toString + "," + entry.getValue().toString
					RelayduinoRelayControl.sendCommand(cmdStr)
				}
				RelayRequests.remove(entry.getKey())
				RelayRequestsSize.postUpdate(RelayRequests.size())
				lastRelayRunning = entry.getKey()
			}
		}
	}
end

rule "Relayduino relay request"
when
	Item RelayduinoRelayRequest changed
then
	var String message = ""
	message = "RelayduinoRelayRequest state changed to " + RelayduinoRelayRequest.state.toString + " at " + new DateTime().toString
	logInfo(loggingname, message)

	val String[] messageParts = RelayduinoRelayRequest.state.toString.split(",");
	val Integer relay = Integer::parseInt(messageParts.get(0))
	val Integer duration = Integer::parseInt(messageParts.get(1))

	if (duration > 0) {		// relay request to turn on
		RelayRequests.put(relay, duration)
		message = "RelayRequests.put with relay " + relay + " and duration " + duration + " at " + new DateTime().toString
		logInfo(loggingname, message)
	} else {		// relay was turned on
		RelayRequests.remove(relay)
		message = "RelayRequests.remove with relay " + relay + " at " + new DateTime().toString
		logInfo(loggingname, message)
	}
	
	RelayRequestsSize.postUpdate(RelayRequests.size())
	message = "RelayRequests.size is " + RelayRequests.size()
	logInfo(loggingname, message)
end

rule "Relayduino Relay Request"
when
	Item RelayduinoRelay_1_Request changed or
	Item RelayduinoRelay_2_Request changed or
	Item RelayduinoRelay_3_Request changed or
	Item RelayduinoRelay_4_Request changed
then
	Thread::sleep(100)
	var String message = ""
	var lastitem = gRelayduinoRelaysRequest.members.filter[s|s.lastUpdate("rrd4j") != null].sortBy[lastUpdate("rrd4j")].last as SwitchItem
	logInfo(loggingname, String::format("Last item: %s --> %s", lastitem.name.toString, lastitem.state.toString))
	val Integer relay = Integer::parseInt(lastitem.name.split("_").get(1))
	logInfo(loggingname, "relay is " + relay)
	val String label = lastitem.name.split("_").get(0) + "_" + relay
	logInfo(loggingname, "label is " + label)
	val modeItem = gRelayduinoRelaysMode.members.findFirst[name.startsWith(label)]
	logInfo(loggingname, "mode item is " + modeItem)
	val mode = modeItem.state
	logInfo(loggingname, "mode state is " + mode)
	if (lastitem.state == OnOffType::ON) {
		logInfo(loggingname, "Processing request ON")
		val String itemstr = label + "_LastRequestOn"
		itemstr.postUpdate(new DateTimeType().toString)
		var Integer duration = 0
		var durationItem = gRelayduinoDefaultDurations.members.findFirst[name.startsWith(label)]
		logInfo(loggingname, "duration item is " + durationItem)
		duration = (durationItem.state as DecimalType).intValue
		logInfo(loggingname, "Default duration: " + duration + " minutes")
		if (mode == 2) {
			// mode off
			logInfo(loggingname, "Off mode")
			return;
		}
		if (mode == 1) {
			// manual mode
			logInfo(loggingname, "Manual mode")
			durationItem = gRelayduinoRelaysManualDuration.members.findFirst[name.startsWith(label)]
			logInfo(loggingname, "duration item is " + durationItem)
			var Integer manualDuration = (durationItem.state as DecimalType).intValue
			logInfo(loggingname, "Manual duration: " + manualDuration + " minutes")
			if (manualDuration != NULL) {
				duration = manualDuration
			}
		}
		logInfo(loggingname, "Using duration: " + duration + " minutes")
		if (duration > 0) {
			// relay request to turn on
			RelayRequests.put(relay, duration)
			message = "RelayRequests.put with relay " + relay + " and duration " + duration + " at " + new DateTime().toString
			logInfo(loggingname, message)
		} else {
			logInfo(loggingname, "Duration is zero")
		}
	} else {
		// relay was turned on
		logInfo(loggingname, "Processing request OFF")
		val String itemstr = label + "_LastRequestOff"
		itemstr.postUpdate(new DateTimeType().toString)
		RelayRequests.remove(relay)
		message = "RelayRequests.remove with relay " + relay + " at " + new DateTime().toString
		logInfo(loggingname, message)
		if (lastRelayRunning == relay) {
			var String cmdStr = ""
			if (RelayduinoUseMasterRelay.state == OnOffType::ON) {
				cmdStr = RelayduinoMasterRelay.state.toString + "," + "0"
				RelayduinoRelayControl.sendCommand(cmdStr)
			}
			Thread::sleep(1000)
			cmdStr = relay + "," + "0"
			RelayduinoRelayControl.sendCommand(cmdStr)
		}
		if (mode == 1) {
			// manual mode
			modeItem.postUpdate(0)	// set to auto
		}
	}
	RelayRequestsSize.postUpdate(RelayRequests.size())
	logInfo(loggingname, "RelayRequests size " + RelayRequests.size)
end

rule "Relayduino relay state"
when
	Item RelayduinoRelayState changed
then
	var String message = ""
	message = "RelayduinoRelayState " + RelayduinoRelayState.state.toString + " at " + new DateTime().toString
	logInfo(loggingname, message)
	val String[] messageParts = RelayduinoRelayState.state.toString.split(",");
	val Integer relay = Integer::parseInt(messageParts.get(0))
	val Integer state = Integer::parseInt(messageParts.get(1))
	val item = gRelayduinoRelaysState.members.findFirst[name.equals("RelayduinoRelay_" + relay + "_State")]
	if (state == 1) {
//		val String item = "RelayduinoRelay_" + relay.toString + "_State"
		item.sendCommand(OnOffType::ON)
		logInfo(loggingname, RelayduinoUseMasterRelay.toString)
		logInfo(loggingname, RelayduinoMasterRelay.toString)
		if (RelayduinoUseMasterRelay.state == OnOffType::ON) {
			if (RelayduinoMasterRelay.state != relay) {
				RelayduinoRelayRunning.postUpdate(relay)
			}
		} else {
			RelayduinoRelayRunning.postUpdate(relay)
		}
		message = systemname + ": " + "relay " + relay + " on" + " at " + new DateTime().toString
		logInfo(loggingname, message)
		sendNotification(notificationto, message)
	} else if (state == 0) {
//		val String item = "RelayduinoRelay_" + relay.toString + "_State"
		item.sendCommand(OnOffType::OFF)
		RelayduinoRelayRunning.postUpdate(0)
		message = systemname + ": " + "relay " + relay + " off" + " at " + new DateTime().toString
		logInfo(loggingname, message)
		sendNotification(notificationto, message)	
	}
end

rule "Last relay on and off times"
when
	Item RelayduinoRelay_1_State changed or
	Item RelayduinoRelay_2_State changed or
	Item RelayduinoRelay_3_State changed or
	Item RelayduinoRelay_4_State changed or
//	Item RelayduinoRelay_5_State changed or
//	Item RelayduinoRelay_6_State changed or
//	Item RelayduinoRelay_7_State changed or
	Item RelayduinoRelay_8_State changed
then
	Thread::sleep(100)
	val item = gRelayduinoRelaysState.members.filter[s|s.lastUpdate("rrd4j") != null].sortBy[lastUpdate("rrd4j")].last as SwitchItem
	var String itemstr = item.name.split("_").get(0) + "_" + item.name.split("_").get(1)
	if (item.state == OnOffType::ON) {
		itemstr = itemstr + "_LastOn"
	} else {
		itemstr = itemstr + "_LastOff"
	}
	itemstr.postUpdate(new DateTimeType().toString)
end
